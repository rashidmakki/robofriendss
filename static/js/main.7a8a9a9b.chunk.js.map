{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","action.js","constant.js","serviceWorker.js","reducer.js","index.js"],"names":["Card","name","email","id","className","src","alt","CardList","robots","map","user","i","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","console","log","style","overflow","border","height","children","App","this","onRequestRobots","onSearchChange","isPending","filteredRobots","filter","robot","toLowerCase","includes","React","Component","connect","state","searchRobots","requestRobots","error","dispatch","event","payload","target","value","fetch","then","response","json","data","catch","Boolean","window","location","hostname","match","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.7a8a9a9b.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Card=({name,email,id})=>{\r\n\t\r\n\t return(\r\n      <div className='tc bg-light-green dib br3 pa3 ma2 grow'>\r\n        <img src={`https://robohash.org/${id}?w=100&h=100`} alt=\"robot\"/>\r\n       \r\n        <div>\r\n         <h2> {name} </h2>\r\n         <p> {email} </p>\r\n        </div>\r\n      </div>\r\n\r\n\t\t);\r\n}\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList=({robots})=>{\r\n  \r\n  return(\r\n         <div>\r\n         {\r\n\t          robots.map((user,i)=>{\r\n         return(\r\n  \t    <Card \r\n  \t          key={i} \r\n  \t          id={robots[i].id} \r\n  \t          name={robots[i].name} \r\n  \t          email={robots[i].email}\r\n  \t          />\r\n  \t          );\r\n            })\r\n            }\r\n\t       </div>\r\n  \t);\r\n\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox=({searchfield,searchChange})=>{\r\n\treturn(\r\n      <div className='pa2'>\r\n\t\t<input\r\n\t\t className='pa2 ba b--green bg-lightest-blue'\r\n\t\t type='search' \r\n\t\t placeholder='search robots'\r\n\t\t onChange={searchChange}\r\n\t    />\r\n\t  </div>\r\n\t\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\n\r\n\r\nconst Scroll=(props)=>{\r\n\tconsole.log(props);\r\n\treturn (\r\n      <div style={{overflow:'scroll',border:'5px solid black',height:'500px'}}>\r\n        {props.children}\r\n      </div>\r\n\r\n\t\t)\r\n};\r\n\r\nexport default Scroll;","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nimport CardList from '../components/CardList';\r\nimport SearchBox from '../components/SearchBox';\r\nimport Scroll from '../components/Scroll';\r\nimport './App.css';\r\n\r\nimport {setSearchField,requestRobots} from '../action'\r\n\r\nconst mapStateToProps=state=>{\r\n\treturn{\r\n\t\tsearchfield:state.searchRobots.searchfield,\r\n\t\trobots:state.requestRobots.robots,\r\n\t\tisPending:state.requestRobots.isPending,\r\n\t\terror:state.requestRobots.error\r\n\t}\r\n}\r\n\r\nconst mapDispatchToProps=(dispatch)=>{\r\n\treturn{\r\n\t    onSearchChange:(event)=>dispatch(setSearchField(event.target.value)),\r\n\t    onRequestRobots:()=> dispatch(requestRobots())\r\n    }\r\n\r\n}\r\n\r\nclass App extends React.Component{\r\n\t\r\n\t\r\n\r\n\r\n    componentDidMount(){\r\n    \tthis.props.onRequestRobots();\r\n      }\r\n \r\n\r\n    \t\r\n\trender(){\r\n\t\t\r\n\t\tconst{searchfield,onSearchChange,robots,isPending}=this.props;\r\n\t\tconst filteredRobots=robots.filter(robot=>{\r\n    \t\treturn robot.name.toLowerCase().includes(searchfield.toLowerCase());\r\n    \t})\r\n\r\n      return isPending?\r\n    \t<h1> Loading...</h1> :\r\n    \t\r\n\t      (\r\n\t\t   <div className='tc'>\r\n\t\t    <h1 className='f1'>Robofriends</h1>\r\n\t\t    <SearchBox searchChange={onSearchChange} />\r\n\t\t       <Scroll>\r\n\t\t        \r\n\t\t      <CardList robots={filteredRobots} />\r\n\t\t        \r\n\t\t       </Scroll>\r\n\t\t   </div>\r\n\t\t);\r\n\t\r\n  }\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","import{\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constant.js';\r\n\r\nexport const setSearchField=(text)=>({\r\n\ttype: CHANGE_SEARCH_FIELD,\r\n\tpayload:text\r\n\r\n})\r\n\r\nexport const requestRobots=()=>(dispatch)=>{\r\n\tdispatch({type:REQUEST_ROBOTS_PENDING});\r\n\tfetch('https://jsonplaceholder.typicode.com/users')\r\n    \t.then(response=>response.json())\r\n    \t.then(data=>dispatch({type:REQUEST_ROBOTS_SUCCESS,payload:data}))\r\n    \t.catch(error=>dispatch({type:REQUEST_ROBOTS_FAILED,payload:error}))\r\n}","export const CHANGE_SEARCH_FIELD='CHANGE_SEARCH_FIELD';\r\n\r\nexport const REQUEST_ROBOTS_PENDING='REQUEST_ROBOTS_PENDING';\r\nexport const REQUEST_ROBOTS_SUCCESS='REQUEST_ROBOTS_SUCCESS';\r\nexport const REQUEST_ROBOTS_FAILED='REQUEST_ROBOTS_FAILED';\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import{\r\n\tCHANGE_SEARCH_FIELD,\r\n\tREQUEST_ROBOTS_PENDING,\r\n\tREQUEST_ROBOTS_SUCCESS,\r\n\tREQUEST_ROBOTS_FAILED\r\n} from './constant.js';\r\n\r\nconst initialStateSearch={\r\n\tsearchfield:''\r\n}\r\n\r\n\r\n\r\nexport const searchRobots=(state=initialStateSearch,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase CHANGE_SEARCH_FIELD:\r\n\t\treturn Object.assign({},state,{searchfield:action.payload});\r\n\t\tdefault:\r\n\t\treturn state;\r\n\t}\r\n\r\n}\r\n\r\nconst initialStateRobots={\r\n\tisPending:false,\r\n\trobots:[],\r\n\terror:\"\"\r\n}\r\n\r\nexport const requestRobots=(state=initialStateRobots,action={})=>{\r\n\tswitch(action.type){\r\n\t\tcase REQUEST_ROBOTS_PENDING:\r\n\t\treturn Object.assign({},state,{isPending:true});\r\n\t\tcase REQUEST_ROBOTS_SUCCESS:\r\n\t\treturn Object.assign({},state,{robots:action.payload,isPending:false});\r\n\t\tcase REQUEST_ROBOTS_FAILED:\r\n\t\treturn Object.assign({},state,{error:action.payload,isPending:false});\r\n\t\tdefault:\r\n\t\treturn state;\r\n\t}\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { createStore,applyMiddleware,combineReducers} from 'redux';\nimport { createLogger } from 'redux-logger';\nimport thunkMiddleware from 'redux-thunk';\nimport './index.css';\nimport App from './containers/App';\nimport * as serviceWorker from './serviceWorker';\nimport { searchRobots,requestRobots } from './reducer';\nimport 'tachyons';\n\nconst logger=createLogger();\n\nconst rootReducer=combineReducers({searchRobots,requestRobots})\nconst store=\n   createStore(rootReducer,applyMiddleware(thunkMiddleware,logger))\n\nReactDOM.render(\n\t            <Provider store={store}>\n\t              <App />\n\t            </Provider>, document.getElementById('root'));\n                \n\nserviceWorker.unregister();\n"],"sourceRoot":""}